input {
    file {
        path => "${ES_GTD_FILES}"
        start_position => "beginning"
        codec => plain {
            charset => "ISO-8859-1"
        }
        sincedb_path => "/dev/null"
        ignore_older => 0
    }
}

filter {

    csv {
        # codebook definitions: https://www.start.umd.edu/gtd/downloads/Codebook.pdf
        columns => ["eventid","iyear","imonth","iday","approxdate","extended","resolution","country","country_txt","region","region_txt","provstate","city","latitude","longitude","specificity","vicinity","location2","summary","crit1","crit2","crit3","doubtterr","alternative","alternative_txt","multiple","success","suicide","attacktype1","attacktype1_txt","attacktype2","attacktype2_txt","attacktype3","attacktype3_txt","targtype1","targtype1_txt","targsubtype1","targsubtype1_txt","corp1","target1","natlty1","natlty1_txt","targtype2","targtype2_txt","targsubtype2","targsubtype2_txt","corp2","target2","natlty2","natlty2_txt","targtype3","targtype3_txt","targsubtype3","targsubtype3_txt","corp3","target3","natlty3","natlty3_txt","gname","gsubname","gname2","gsubname2","gname3","gsubname3","motive","guncertain1","guncertain2","guncertain3","individual","nperps","nperpcap","claimed","claimmode","claimmode_txt","claim2","claimmode2","claimmode2_txt","claim3","claimmode3","claimmode3_txt","compclaim","weaptype1","weaptype1_txt","weapsubtype1","weapsubtype1_txt","weaptype2","weaptype2_txt","weapsubtype2","weapsubtype2_txt","weaptype3","weaptype3_txt","weapsubtype3","weapsubtype3_txt","weaptype4","weaptype4_txt","weapsubtype4","weapsubtype4_txt","weapdetail","nkill","nkillus","nkillter","nwound","nwoundus","nwoundte","property","propextent","propextent_txt","propvalue","propcomment","ishostkid","nhostkid","nhostkidus","nhours","ndays","divert","kidhijcountry","ransom","ransomamt","ransomamtus","ransompaid","ransompaidus","ransomnote","hostkidoutcome","hostkidoutcome_txt","nreleased","addnotes","scite1","scite2","scite3","dbsource","INT_LOG","INT_IDEO","INT_MISC","INT_ANY","related"]
    }

    if [iday] == "0" {
        mutate {
            replace => {
                "iday" => "1"
            }
        }
    }

    if [imonth] == "0" {
        mutate {
            replace => {
                "imonth" => "1"
            }
        }
    }

    ruby {
          code => "
                r = []
                r << event.get('crit1') if event.get('crit1')
                r << event.get('crit2') if event.get('crit2')
                r << event.get('crit3') if event.get('crit3')
                event.set('crits', r)

                r = []
                r << event.get('attacktype1_txt') if event.get('attacktype1_txt')
                r << event.get('attacktype2_txt') if event.get('attacktype2_txt')
                r << event.get('attacktype3_txt') if event.get('attacktype3_txt')
                event.set('attacktypes', r)

                r = []
                r << event.get('gname') if event.get('gname')
                r << event.get('gname2') if event.get('gname2')
                r << event.get('gname3') if event.get('gname3')
                event.set('perpetrators', r)

                r = []
                r << event.get('target') if event.get('target')
                r << event.get('target2') if event.get('target2')
                r << event.get('target3') if event.get('target3')
                event.set('targets', r)

                r = []
                r << event.get('targsubtype1_txt') if event.get('targsubtype1_txt')
                r << event.get('targsubtype2_txt') if event.get('targsubtype2_txt')
                r << event.get('targsubtype3_txt') if event.get('targsubtype3_txt')
                event.set('targetsubtypes_txt', r)

                r = []
                r << event.get('targtype1_txt') if event.get('targtype1_txt')
                r << event.get('targtype2_txt') if event.get('targtype2_txt')
                r << event.get('targtype3_txt') if event.get('targtype3_txt')
                event.set('targettypes_txt', r)

                r = []
                r << event.get('weaptype1_txt') if event.get('weaptype1_txt')
                r << event.get('weaptype2_txt') if event.get('weaptype2_txt')
                r << event.get('weaptype3_txt') if event.get('weaptype3_txt')
                r << event.get('weaptype4_txt') if event.get('weaptype4_txt')
                event.set('weapontypes', r)

                r = []
                r << event.get('weapsubtype1_txt') if event.get('weapsubtype1_txt')
                r << event.get('weapsubtype2_txt') if event.get('weapsubtype2_txt')
                r << event.get('weapsubtype3_txt') if event.get('weapsubtype3_txt')
                r << event.get('weapsubtype4_txt') if event.get('weapsubtype4_txt')
                event.set('weaponsubtypes', r)

                r = []
                r << event.get('natlty1_txt') if event.get('natlty1_txt')
                r << event.get('natlty2_txt') if event.get('natlty2_txt')
                r << event.get('natlty3_txt') if event.get('natlty3_txt')
                event.set('targetnationalities', r)

                r = []
                r << event.get('corp1') if event.get('corp1')
                r << event.get('corp2') if event.get('corp2')
                r << event.get('corp3') if event.get('corp3')
                event.set('targetcorps', r)
          "
    }

     mutate {
        add_field => { "date" => "%{iyear}-%{imonth}-%{iday}" }
        remove_field => [ "message", "host", "location" ]
     }


    date {
        locale => "en"
        match => ["date", "YYYY-M-d"]
        timezone => "UTC"
    }

    if [latitude]{
        mutate {
            add_field => {
                "[location][lat]" => "%{latitude}"
                "[location][lon]" => "%{longitude}"
            }
        }
    }

    # remove -9 and -99 that appears in many cases:
    if [nperps] and [nperps] < "0" { mutate { replace => {"nperps" => ""}}}
    if [vicinity] and [vicinity] < "0" { mutate { replace => {"vicinity" => ""}}}
    if [doubtterr] and [doubtterr] < "0" { mutate { replace => {"doubtterr" => ""}}}
    if [nperpcap] and [nperpcap] < "0" { mutate { replace => {"nperpcap" => ""}}}
    if [claimed] and [claimed] < "0" { mutate { replace => {"claimed" => ""}}}
    if [claim2] and [claim2] < "0" { mutate { replace => {"claim2" => ""}}}
    if [compclaim] and [compclaim] < "0" { mutate { replace => {"compclaim" => ""}}}
    if [property] and [property] < "0" { mutate { replace => {"property" => ""}}}
    if [propvalue] and [propvalue] < "0" { mutate { replace => {"propvalue" => ""}}}
    if [ishostkid] and [ishostkid] < "0" { mutate { replace => {"ishostkid" => ""}}}
    if [nhostkid] and [nhostkid] < "0" { mutate { replace => {"nhostkid" => ""}}}
    if [nhostkidus] and [nhostkidus] < "0" { mutate { replace => {"nhostkidus" => ""}}}
    if [nhours] and [nhours] < "0" { mutate { replace => {"nhours" => ""}}}
    if [ndays] and [ndays] < "0" { mutate { replace => {"ndays" => ""}}}
    if [ransom] and [ransom] < "0" { mutate { replace => {"ransom" => ""}}}
    if [ransomamt] and [ransomamt] < "0" { mutate { replace => {"ransomamt" => ""}}}
    if [ransomamtus] and [ransomamtus] < "0" { mutate { replace => {"ransomamtus" => ""}}}
    if [ransompaid] and [ransompaid] < "0" { mutate { replace => {"ransompaid" => ""}}}
    if [ransompaidus] and [ransompaidus] < "0" { mutate { replace => {"ransompaidus" => ""}}}
    if [ransomnote] and [ransomnote] < "0" { mutate { replace => {"ransomnote" => ""}}}
    if [nreleased] and [nreleased] < "0" { mutate { replace => {"nreleased" => ""}}}

    if [related]{
        mutate {
            split => { "related" => ", " }
        }
    }
}

output{

    # stdout { codec => rubydebug }

    elasticsearch {
        user => '${ES_GTD_USER}'
        password => '${ES_GTD_PASSWORD}'
        index => '${ES_GTD_INDEX}'
        document_id => '%{eventid}'
        document_type => 'event'
    }

}